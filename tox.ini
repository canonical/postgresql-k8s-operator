# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/postgresql_k8s
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
set_env =
    PYTHONPATH = {tox_root}:{tox_root}/lib:{[vars]src_path}
    PY_COLORS = 1
allowlist_externals =
    poetry

[testenv:{build,pack-wrapper}]
# Wrap `charmcraft pack`
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
    mv
commands_pre =
    poetry export --only main,charm-libs --output requirements.txt --without-hashes
commands =
    build: charmcraft pack {posargs}
commands_post =
    mv requirements.txt requirements-last-build.txt

[testenv:format]
description = Apply coding style standards to code
commands_pre =
    poetry install --only format
commands =
    poetry lock --no-update
    poetry run ruff --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
allowlist_externals =
    {[testenv]allowlist_externals}
    find
commands_pre =
    poetry install --only lint,format
commands =
    poetry check --lock
    poetry run codespell {[vars]all_path}
    poetry run ruff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}
    find {[vars]all_path} -type f \( -name "*.sh" -o -name "*.bash" \) -exec poetry run shellcheck --color=always \{\} +

[testenv:unit-{juju2, juju3}]
description = Run unit tests
set_env =
    {[testenv]set_env}
    juju2: LIBJUJU="2.9.44.1"
    juju3: LIBJUJU="3.2.0.1"
commands_pre =
    poetry install --only main,charm-libs,unit
commands =
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report

[testenv:backup-integration]
description = Run backup integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
    SECRETS_FROM_GITHUB
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_backups.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:charm-integration]
description = Run charm integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_charm.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:database-relation-integration]
description = Run database relation integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/new_relations/test_new_relations.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:db-relation-integration]
description = Run db relation integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_db.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:db-admin-relation-integration]
description = Run db-admin relation integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_db_admin.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:ha-replication-integration]
description = Run high availability replication integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha_tests/test_replication.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:ha-self-healing-integration]
description = Run high availability self healing integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha_tests/test_self_healing.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:password-rotation-integration]
description = Run password rotation integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_password_rotation.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:plugins-integration]
description = Run plugins integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_plugins.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:tls-integration]
description = Run TLS integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_tls.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:upgrade-integration]
description = Run upgrade integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha_tests/test_upgrade.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:upgrade-from-stable-integration]
description = Run upgrade from stable integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha_tests/test_upgrade_from_stable.py
commands_post =
    {[testenv:pack-wrapper]commands_post}

[testenv:integration]
description = Run integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
    SECRETS_FROM_GITHUB
allowlist_externals =
    {[testenv:pack-wrapper]allowlist_externals}
commands_pre =
    poetry install --only integration
    {[testenv:pack-wrapper]commands_pre}
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s --ignore={[vars]tests_path}/unit/ {posargs}
commands_post =
    {[testenv:pack-wrapper]commands_post}
