# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/postgresql_k8s
test_ha_charm_libs = {tox_root}tests/integration/ha_tests/application-charm/lib
test_rel_charm_libs = {tox_root}tests/integration/new_relations/application-charm/lib
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
set_env =
    PYTHONPATH = {tox_root}:{tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
    juju2: LIBJUJU="2.9.44.1"  # libjuju2
    juju3: LIBJUJU="3.2.0.1"  # libjuju3
pass_env =
    PYTHONPATH
    HOME
    CHARM_BUILD_DIR
    MODEL_SETTINGS
    PYTEST_SKIP_DEPLOY
deps =
    poetry

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install --only format
    poetry run ruff --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only format,lint
    poetry run codespell {tox_root} --skip {tox_root}/.git --skip {tox_root}/.tox \
      --skip {tox_root}/build --skip {tox_root}/lib --skip {tox_root}/venv \
      --skip {tox_root}/.mypy_cache --skip {tox_root}/LICENSE --skip {tox_root}/poetry.lock \
      --skip {[vars]test_ha_charm_libs} --skip {[vars]test_rel_charm_libs}
    poetry run codespell {[vars]lib_path
    # pflake8 wrapper supports config from pyproject.toml
    poetry run ruff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}


[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report

[testenv:backup-integration-{juju2, juju3}]
description = Run backup integration tests
pass_env =
    {[testenv]pass_env}
    AWS_ACCESS_KEY
    AWS_SECRET_KEY
    GCP_ACCESS_KEY
    GCP_SECRET_KEY
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_backups.py

[testenv:charm-integration-{juju2, juju3}]
description = Run charm integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_charm.py

[testenv:database-relation-integration-{juju2, juju3}]
description = Run database relation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/new_relations/test_new_relations.py

[testenv:db-relation-integration-{juju2, juju3}]
description = Run db relation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_db.py

[testenv:db-admin-relation-integration-{juju2, juju3}]
description = Run db-admin relation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_db_admin.py

[testenv:ha-replication-integration-{juju2, juju3}]
description = Run high availability replication integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/ha_tests/test_replication.py

[testenv:ha-self-healing-integration-{juju2, juju3}]
description = Run high availability self healing integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/ha_tests/test_self_healing.py

[testenv:password-rotation-integration-{juju2, juju3}]
description = Run password rotation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_password_rotation.py

[testenv:plugins-integration-{juju2, juju3}]
description = Run plugins integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_plugins.py

[testenv:tls-integration-{juju2, juju3}]
description = Run TLS integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/test_tls.py

[testenv:integration-{juju2, juju3}]
description = Run all integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    pip install juju=={env:LIBJUJU}
    poetry run pytest -v --tb native --log-cli-level=INFO -s  --durations=0 {posargs} {[vars]tests_path}/integration/

[testenv:poetry-lock]
description = Install, lock and export poetry dependencies
commands =
    poetry lock
    poetry export -f requirements.txt -o requirements.txt
