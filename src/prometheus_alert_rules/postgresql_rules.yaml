# This file based on https://samber.github.io/awesome-prometheus-alerts/rules#postgresql-1

groups:

- name: PostgresqlExporterK8s

  rules:

    # 2.2.1
    - alert: PostgresqlDown
      expr: 'pg_up == 0'
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} is down.
        description: |
          If you are not upgrading or configuring cross-region async replication clusters, check for errors in the Loki logs.
          LABELS = {{ $labels }}

    # 2.2.2
    # critical -> info
    - alert: PostgresqlRestarted
      expr: 'time() - pg_postmaster_start_time_seconds < 60'
      for: 0m
      labels:
        severity: info
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has restarted.
        description: |
          If you are not enabling/disabling TLS or upgrading or configuring cross-region async replication clusters, check for errors in the Loki logs.
          LABELS = {{ $labels }}

    # 2.2.3
    - alert: PostgresqlExporterError
      expr: 'pg_exporter_last_scrape_error > 0'
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} is showing an exporter error.
        description: |
          There may be a buggy query in query.yaml
          LABELS = {{ $labels }}

    # 2.2.4
    # 10 days -> 7 days
    - alert: PostgresqlTableNotAutoVacuumed
      expr: '(pg_stat_user_tables_last_autovacuum > 0) and (time() - pg_stat_user_tables_last_autovacuum) > 60 * 60 * 24 * 7'
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: A PostgreSQL table in instance {{ $labels.instance }} is not auto vacuumed.
        description: |
          Table {{ $labels.relname }} has not been auto vacuumed for 7 days.
          Double-check your VACUUM settings.
          LABELS = {{ $labels }}

    # 2.2.5
    # 10 days -> 7 days
    - alert: PostgresqlTableNotAutoAnalyzed
      expr: '(pg_stat_user_tables_last_autoanalyze > 0) and (time() - pg_stat_user_tables_last_autoanalyze) > 24 * 60 * 60 * 7'
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: A PostgreSQL table in instance {{ $labels.instance }} is not auto analyzed.
        description: |
          Table {{ $labels.relname }} has not been auto analyzed for 7 days.
          Double-check your AUTOVACUUM ANALYZE settings.
          LABELS = {{ $labels }}

    # 2.2.6
    - alert: PostgresqlTooManyConnections
      expr: 'sum by (instance, job, server) (pg_stat_activity_count) > min by (instance, job, server) (pg_settings_max_connections * 0.8)'
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} is using > 80% of the maximum connections.
        description: |
          Consider checking how many connections the client application is opening, or using PgBouncer in front of the database.
          LABELS = {{ $labels }}

    # 2.2.7
    # warning -> info
    - alert: PostgresqlNotEnoughConnections
      expr: 'sum by (datname) (pg_stat_activity_count{datname!~"template.*|postgres"}) < 5'
      for: 2m
      labels:
        severity: info
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} does not have enough connections.
        description: |
          PostgreSQL instance {{ $labels.instance }} should have more connections (> 5).
          Consider double-checking how many connections the client application is opening and/or using PgBouncer in front of the database.
          LABELS = {{ $labels }}

    # 2.2.8
    - alert: PostgresqlDeadLocks
      expr: 'increase(pg_stat_database_deadlocks{datname!~"template.*|postgres"}[1m]) > 5'
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has dead locks.
        description: |
          See more details with the pg_locks view.
          LABELS = {{ $labels }}

    # 2.2.9
    - alert: PostgresqlHighRollbackRate
      expr: 'sum by (namespace,datname) ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) / ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) + (rate(pg_stat_database_xact_commit{datname!~"template.*|postgres",datid!="0"}[3m])))) > 0.02'
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has a high rollback rate instance.
        description: |
          The ratio of transactions being aborted compared to committed is > 2 %.
          This is probably happening due to unoptimized configurations related to commit delay, connections, memory, and WAL files.
          LABELS = {{ $labels }}

    # 2.2.10
    # critical -> info
    - alert: PostgresqlCommitRateLow
      expr: 'rate(pg_stat_database_xact_commit[1m]) < 10'
      for: 2m
      labels:
        severity: info
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has a low commit rate. 
        description: |
          PostgreSQL seems to be processing very few transactions.
          Please check for long-running queries and configuration issues, like insufficient cache size.
          LABELS = {{ $labels }}

    # 2.2.11
    # warning -> info
    - alert: PostgresqlLowXidConsumption
      expr: 'rate(pg_txid_current[1m]) < 5'
      for: 2m
      labels:
        severity: info
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} shows low XID consumption.
        description: |
          PostgreSQL seems to be consuming transaction IDs very slowly.
          Run ANALYZE to update the optimizer statistics, ensure that query plans are correct, and double-check your VACUUM settings.
          LABELS = {{ $labels }}

    # 2.2.12
    - alert: PostgresqlHighRateStatementTimeout
      expr: 'rate(postgresql_errors_total{type="statement_timeout"}[1m]) > 3'
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} shows a high rate of statement timeout.
        description: |
          Either tune `statement_timeout` when sending queries or use EXPLAIN ANALYZE to understand how the queries can be improved.
          VALUE = {{ $value }}
          LABELS = {{ $labels }}

    # 2.2.13
    # critical -> warning
    - alert: PostgresqlHighRateDeadlock
      expr: 'increase(postgresql_errors_total{type="deadlock_detected"}[1m]) > 1'
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} shows a high deadlock rate.
        description: |
          More details can be obtained through the pg_locks view.
          LABELS = {{ $labels }}

    # 2.2.14
    # warning -> info
    - alert: PostgresqlUnusedReplicationSlot
      expr: 'pg_replication_slots_active == 0'
      for: 1m
      labels:
        severity: info
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has unused replication slots.
        description: |
          Check if a replica is not using any of them before deleting it.
          LABELS = {{ $labels }}

    # 2.2.15
    - alert: PostgresqlTooManyDeadTuples
      expr: '((pg_stat_user_tables_n_dead_tup > 10000) / (pg_stat_user_tables_n_live_tup + pg_stat_user_tables_n_dead_tup)) >= 0.1'
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has too many dead tuples.
        description: |
          Double-check your VACUUM settings.
          LABELS = {{ $labels }}

    # 2.2.16
    - alert: PostgresqlConfigurationChanged
      expr: '{__name__=~"pg_settings_.*"} != ON(__name__, instance) {__name__=~"pg_settings_([^t]|t[^r]|tr[^a]|tra[^n]|tran[^s]|trans[^a]|transa[^c]|transac[^t]|transact[^i]|transacti[^o]|transactio[^n]|transaction[^_]|transaction_[^r]|transaction_r[^e]|transaction_re[^a]|transaction_rea[^d]|transaction_read[^_]|transaction_read_[^o]|transaction_read_o[^n]|transaction_read_on[^l]|transaction_read_onl[^y]).*"} OFFSET 5m'
      for: 0m
      labels:
        severity: info
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} configuration has changed.
        description: |
          PostgreSQL database configuration has changed.
          LABELS = {{ $labels }}

    # 2.2.17
    # critical -> warning
    - alert: PostgresqlSslCompressionActive
      expr: 'sum(pg_stat_ssl_compression) > 0'
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} SSL compression is active.
        description: |
          Database connections with SSL compression are enabled. This may add significant jitter in replication delay.
          Replicas should turn off SSL compression via `sslcompression=0` in `recovery.conf`.
          LABELS = {{ $labels }}

    # 2.2.18
    # critical -> warning
    - alert: PostgresqlTooManyLocksAcquired
      expr: '((sum (pg_locks_count)) / (pg_settings_max_locks_per_transaction * pg_settings_max_connections)) > 0.20'
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has acquired too many locks.
        description: |
          If this alert happens frequently, you may need to increase the PostgreSQL setting max_locks_per_transaction.
          LABELS = {{ $labels }}

    # 2.2.19
    - alert: PostgresqlBloatIndexHigh(>80%)
      expr: 'pg_bloat_btree_bloat_pct > 80 and on (idxname) (pg_bloat_btree_real_size > 100000000)'
      for: 1h
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has a high bloat index (> 80%).
        description: |
          The index {{ $labels.idxname }} is bloated.
          Consider running `REINDEX INDEX CONCURRENTLY {{ $labels.idxname }};`
          LABELS = {{ $labels }}

    # 2.2.20
    - alert: PostgresqlBloatTableHigh(>80%)
      expr: 'pg_bloat_table_bloat_pct > 80 and on (relname) (pg_bloat_table_real_size > 200000000)'
      for: 1h
      labels:
        severity: warning
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }} has a high bloat table (> 80%).
        description: |
          The table {{ $labels.relname }} is bloated.
          Consider running `VACUUM {{ $labels.relname }};`
          LABELS = {{ $labels }}

    # 2.2.21
    # warning -> critical
    - alert: PostgresqlInvalidIndex
      expr: 'pg_general_index_info_pg_relation_size{indexrelname=~".*ccnew.*"}'
      for: 6h
      labels:
        severity: critical
      annotations:
        summary: PostgreSQL instance {{ $labels.instance }})= has an invalid index. 
        description: |
          The table {{ $labels.relname }} has an invalid index: {{ $labels.indexrelname }}.
          Consider running `DROP INDEX {{ $labels.indexrelname }};`
          LABELS = {{ $labels }}
