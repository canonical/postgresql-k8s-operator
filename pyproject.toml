# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tool.poetry]
name = "postgresql-k8s"
version = "0.0.1-dev.0"
description = ""
authors = []
license = "Apache-2.0"
readme = "README.md"
homepage = "https://charmhub.io/postgresql-k8s"
repository = "https://github.com/canonical/postgresql-k8s-operator"

[tool.poetry.dependencies]
python = "^3.10.6"
ops = "^2.8.0"
cryptography = "^41.0.5"
boto3 = "^1.28.70"
pgconnstr = "^1.0.1"
requests = "^2.31.0"
tenacity = "^8.2.3"
cosl = "^0.0.7"
pydantic = "^1.10.13"
poetry-core = "^1.7.0"
jsonschema = "^4.19.1"
jinja2 = "^3.1.2"
lightkube = "^0.14.0"
lightkube-models = "^1.28.1.4"
# psycopg2 = "^2.9.9" # Injected in charmcraft.yaml

[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = ">=2.0.0"
# data_platform_libs/v0/upgrade.py
poetry-core = "*"
# data_platform_libs/v0/upgrade.py requires pydantic ^1.10
# grafana_agent/v0/cos_agent.py requires pydantic <2
pydantic = "^1.10, <2"
# grafana_agent/v0/cos_agent.py
cosl = "*"

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
black = "^23.10.1"
ruff = "^0.1.3"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
codespell = "^2.2.6"

[tool.poetry.group.unit]
optional = true

[tool.poetry.group.unit.dependencies]
coverage = {extras = ["toml"], version = "^7.3.2"}
pydantic = "^1.10.13"
pytest = "^7.4.3"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.21.1"
psycopg2 = {version = "^2.9.9", extras = ["binary"]}

[tool.poetry.group.integration]
optional = true

[tool.poetry.group.integration.dependencies]
lightkube = "^0.14.0"
pytest = "^7.4.3"
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v5.1.2", subdirectory = "python/pytest_plugins/github_secrets"}
pytest-operator = "^0.29.0"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v5.1.2", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v5.1.2", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
juju = "^3.2.2"
psycopg2 = {version = "^2.9.9", extras = ["binary"]}
boto3 = "^1.28.70"
tenacity = "^8.2.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Testing tools configuration
[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
asyncio_mode = "auto"
markers = ["unstable"]

# Formatting tools configuration
[tool.black]
line-length = 99
target-version = ["py38"]

# Linting tools configuration
[tool.ruff]
target-version = "py38"
src = ["src", "."]
line-length = 99
select = ["A", "E", "W", "F", "C", "N", "D", "I001", "CPY001"]
extend-ignore = [
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]
# Ignore E501 because using black creates errors with this
# Ignore D107 Missing docstring in __init__
ignore = ["E501", "D107"]

[tool.ruff.per-file-ignores]
"tests/*" = ["D100", "D101", "D102", "D103", "D104"]

[tool.ruff.flake8-copyright]
# Check for properly formatted copyright header in each file
author = "Canonical Ltd."
notice-rgx = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"
