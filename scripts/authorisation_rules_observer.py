# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

"""Authorisation rules changes observer."""

import json
import subprocess
import sys
from ssl import CERT_NONE, create_default_context
from time import sleep
from urllib.parse import urljoin
from urllib.request import urlopen

import psycopg2
import yaml

API_REQUEST_TIMEOUT = 5
PATRONI_CLUSTER_STATUS_ENDPOINT = "cluster"
PATRONI_CONFIG_STATUS_ENDPOINT = "config"
PATRONI_CONF_FILE_PATH = "/var/lib/postgresql/data/patroni.yml"

# File path for the spawned cluster topology observer process to write logs.
LOG_FILE_PATH = "/var/log/authorisation_rules_observer.log"


class UnreachableUnitsError(Exception):
    """Cannot reach any known cluster member."""


def dispatch(run_cmd, unit, charm_dir, custom_event):
    """Use the input juju-run command to dispatch a custom event."""
    dispatch_sub_cmd = "JUJU_DISPATCH_PATH=hooks/{} {}/dispatch"
    # Input is generated by the charm
    subprocess.run([run_cmd, "-u", unit, dispatch_sub_cmd.format(custom_event, charm_dir)])  # noqa: S603


def check_for_database_changes(run_cmd, unit, charm_dir, previous_databases):
    """Check for changes in the databases.

    If changes are detected, dispatch an event to handle them.
    """
    with open(PATRONI_CONF_FILE_PATH) as conf_file:
        conf_file_contents = yaml.safe_load(conf_file)
        password = conf_file_contents["postgresql"]["authentication"]["superuser"]["password"]
    connection = None
    try:
        # Input is generated by the charm
        with (
            psycopg2.connect(
                f"dbname='postgres' user='operator' host='localhost'"
                f"password='{password}' connect_timeout=1"
            ) as connection,
            connection.cursor() as cursor,
        ):
            cursor.execute("SELECT datname,datacl FROM pg_database;")
            current_databases = cursor.fetchall()
    except psycopg2.Error as e:
        with open(LOG_FILE_PATH, "a") as log_file:
            log_file.write(f"Failed to retrieve databases: {e}\n")
        return previous_databases
    else:
        # If it's the first time the databases were retrieved, then store it and use
        # it for subsequent checks.
        if not previous_databases:
            previous_databases = current_databases
        # If the databases changed, dispatch a charm event to handle this change.
        elif current_databases != previous_databases:
            previous_databases = current_databases
            dispatch(run_cmd, unit, charm_dir, "databases_change")
        return previous_databases
    finally:
        if connection:
            connection.close()


def main():
    """Main watch and dispatch loop.

    Watch the Patroni API cluster info. When changes are detected, dispatch the change event.
    """
    patroni_urls, run_cmd, unit, charm_dir = sys.argv[1:]

    previous_databases = None
    urls = [urljoin(url, PATRONI_CLUSTER_STATUS_ENDPOINT) for url in patroni_urls.split(",")]
    member_name = unit.replace("/", "-")
    while True:
        # Disable TLS chain verification
        context = create_default_context()
        context.check_hostname = False
        context.verify_mode = CERT_NONE

        cluster_status = None
        for url in urls:
            try:
                # Scheme is generated by the charm
                resp = urlopen(  # noqa: S310
                    url,
                    timeout=API_REQUEST_TIMEOUT,
                    context=context,
                )
                cluster_status = json.loads(resp.read())
                break
            except Exception as e:
                print(f"Failed to contact {url} with {e}")
                continue
        if not cluster_status:
            raise UnreachableUnitsError("Unable to reach cluster members")
        is_primary = False
        for member in cluster_status["members"]:
            # Check if the current member is the primary.
            if member["name"] == member_name and member["role"] == "leader":
                is_primary = True
                break

        if is_primary:
            previous_databases = check_for_database_changes(
                run_cmd, unit, charm_dir, previous_databases
            )

        # Wait some time before checking again for a authorisation rules change.
        sleep(30)


if __name__ == "__main__":
    main()
