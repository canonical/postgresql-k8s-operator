{"uid":"1eef70f02ce11560","name":"test_pre_upgrade_check","fullName":"tests.integration.ha_tests.test_upgrade_from_stable#test_pre_upgrade_check","historyId":"6f73cd86130887313b53a62d2e64791e","time":{"start":1741484144451,"stop":1741484164756,"duration":20305},"description":"Test that the pre-upgrade-check action runs successfully.","descriptionHtml":"<p>Test that the pre-upgrade-check action runs successfully.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"tmp_path_factory","time":{"start":1741483858122,"stop":1741483858122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1741483858122,"stop":1741483858122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ops_test","time":{"start":1741483858123,"stop":1741483858355,"duration":232},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"abort_on_fail","time":{"start":1741484144451,"stop":1741484144451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test that the pre-upgrade-check action runs successfully.","status":"passed","steps":[],"attachments":[{"uid":"ec51bdd431967fc","name":"log","source":"ec51bdd431967fc.txt","type":"text/plain","size":519}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"abort_on_fail::0","time":{"start":1741484164756,"stop":1741484164756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ops_test::finalizer","time":{"start":1741484689143,"stop":1741484689517,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::2","time":{"start":1741484689518,"stop":1741484689518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1741484689518,"stop":1741484689518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1741484689518,"stop":1741484689518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"abort_on_fail"},{"name":"tag","value":"@pytest.mark.skipif(False, reason='Requires amd64 architecture')"},{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests.integration.ha_tests"},{"name":"suite","value":"test_upgrade_from_stable"},{"name":"host","value":"fv-az1693-573"},{"name":"thread","value":"19901-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.ha_tests.test_upgrade_from_stable"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9e70725972fbae8e","status":"unknown","time":{}}],"categories":[],"history":{"statistic":{"failed":1,"broken":0,"skipped":7,"passed":265,"unknown":6,"total":279},"items":[{"uid":"66daf273e6a0f521","reportUrl":"../3712//#testresult/66daf273e6a0f521","status":"passed","time":{"start":1741397855471,"stop":1741397875787,"duration":20316}},{"uid":"6884e157861a3d5","reportUrl":"../3696//#testresult/6884e157861a3d5","status":"passed","time":{"start":1741311450560,"stop":1741311470853,"duration":20293}},{"uid":"9d764578360a6c74","reportUrl":"../3680//#testresult/9d764578360a6c74","status":"passed","time":{"start":1741225000068,"stop":1741225019373,"duration":19305}},{"uid":"7016b0f8dc12f014","reportUrl":"../3676//#testresult/7016b0f8dc12f014","status":"passed","time":{"start":1741138623934,"stop":1741138645274,"duration":21340}},{"uid":"646ad5ea26e37a1a","reportUrl":"../3669//#testresult/646ad5ea26e37a1a","status":"passed","time":{"start":1741053276953,"stop":1741053297260,"duration":20307}},{"uid":"cd6c5251a793b141","reportUrl":"../3667//#testresult/cd6c5251a793b141","status":"passed","time":{"start":1740965742715,"stop":1740965763044,"duration":20329}},{"uid":"3dff23eb0ac4efdd","reportUrl":"../3666//#testresult/3dff23eb0ac4efdd","status":"passed","time":{"start":1740879502193,"stop":1740879522483,"duration":20290}},{"uid":"8871980e9d5360b8","reportUrl":"../3665//#testresult/8871980e9d5360b8","status":"passed","time":{"start":1740793428278,"stop":1740793446548,"duration":18270}},{"uid":"392854dd0e3824aa","reportUrl":"../3663//#testresult/392854dd0e3824aa","status":"skipped","statusDetails":"XFAIL reason: aborted\n\n_pytest.outcomes.XFailed: aborted","time":{"start":1740707167436,"stop":1740707167436,"duration":0}},{"uid":"e62df4b5c38b0e1d","reportUrl":"../3659//#testresult/e62df4b5c38b0e1d","status":"passed","time":{"start":1740620477375,"stop":1740620495652,"duration":18277}},{"uid":"f21928e47ec70fd1","reportUrl":"../3651//#testresult/f21928e47ec70fd1","status":"passed","time":{"start":1740533780449,"stop":1740533800769,"duration":20320}},{"uid":"c9df28cd7b8bec38","reportUrl":"../3641//#testresult/c9df28cd7b8bec38","status":"passed","time":{"start":1740447309238,"stop":1740447326485,"duration":17247}},{"uid":"c688606fa6f647c8","reportUrl":"../3635//#testresult/c688606fa6f647c8","status":"passed","time":{"start":1740361048822,"stop":1740361066075,"duration":17253}},{"uid":"ab49f524e2dc2423","reportUrl":"../3634//#testresult/ab49f524e2dc2423","status":"passed","time":{"start":1740274552504,"stop":1740274572788,"duration":20284}},{"uid":"c02b9bf9ea67a83","reportUrl":"../3633//#testresult/c02b9bf9ea67a83","status":"passed","time":{"start":1740188093178,"stop":1740188113494,"duration":20316}},{"uid":"5104e19b8ad1d2af","reportUrl":"../3632//#testresult/5104e19b8ad1d2af","status":"passed","time":{"start":1740102086777,"stop":1740102107093,"duration":20316}},{"uid":"aed6fa7954a7d7b0","reportUrl":"../3628//#testresult/aed6fa7954a7d7b0","status":"passed","time":{"start":1740016348603,"stop":1740016366872,"duration":18269}},{"uid":"a9ac44ecc8ed645c","reportUrl":"../3620//#testresult/a9ac44ecc8ed645c","status":"passed","time":{"start":1739929858897,"stop":1739929877179,"duration":18282}},{"uid":"6a6c70b9f5e1367f","reportUrl":"../3615//#testresult/6a6c70b9f5e1367f","status":"failed","statusDetails":"AssertionError: Partition not set to 2\nassert 0 == 2\n +  where 0 = RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0).partition\n +    where RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0) = StatefulSetUpdateStrategy(rollingUpdate=RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0), type='RollingUpdate').rollingUpdate\n +      where StatefulSetUpdateStrategy(rollingUpdate=RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0), type='RollingUpdate') = StatefulSetSpec(selector=LabelSelector(matchExpressions=None, matchLabels={'app.kubernetes.io/name': 'postgresql-k8s'}), serviceName='postgresql-k8s-endpoints', template=PodTemplateSpec(metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju.is/version': '3.6.2', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/name': 'postgresql-k8s'}, managedFields=None, name=None, namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PodSpec(containers=[Container(name='charm', args=['run', '--http', ':38812', '--verbose'], command=['/charm/bin/pebble'], env=[EnvVar(name='JUJU_CONTAINER_NAMES', value='postgresql', valueFrom=None), EnvVar(name='HTTP_PROBE_PORT', value='3856', valueFrom=None)], envFrom=None, image='docker.io/jujusolutions/charm-base:ubuntu-22.04', imagePullPolicy='IfNotPresent', lifecycle=None, livenessProbe=Probe(exec=None, failureThreshold=3, grpc=None, httpGet=HTTPGetAction(port=38812, host=None, httpHeaders=None, path='/v1...s=[PersistentVolumeClaim(apiVersion='v1', kind='PersistentVolumeClaim', metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju-storage-owner': 'postgresql-k8s', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e', 'storage.juju.is/name': 'pgdata'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/managed-by': 'juju', 'storage.juju.is/name': 'pgdata'}, managedFields=None, name='postgresql-k8s-pgdata-04595d6f', namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PersistentVolumeClaimSpec(accessModes=['ReadWriteOnce'], dataSource=None, dataSourceRef=None, resources=VolumeResourceRequirements(limits=None, requests={'storage': '1Gi'}), selector=None, storageClassName='microk8s-hostpath', volumeAttributesClassName=None, volumeMode='Filesystem', volumeName=None), status=PersistentVolumeClaimStatus(accessModes=None, allocatedResourceStatuses=None, allocatedResources=None, capacity=None, conditions=None, currentVolumeAttributesClassName=None, modifyVolumeStatus=None, phase='Pending'))]).updateStrategy\n +        where StatefulSetSpec(selector=LabelSelector(matchExpressions=None, matchLabels={'app.kubernetes.io/name': 'postgresql-k8s'}), serviceName='postgresql-k8s-endpoints', template=PodTemplateSpec(metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju.is/version': '3.6.2', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/name': 'postgresql-k8s'}, managedFields=None, name=None, namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PodSpec(containers=[Container(name='charm', args=['run', '--http', ':38812', '--verbose'], command=['/charm/bin/pebble'], env=[EnvVar(name='JUJU_CONTAINER_NAMES', value='postgresql', valueFrom=None), EnvVar(name='HTTP_PROBE_PORT', value='3856', valueFrom=None)], envFrom=None, image='docker.io/jujusolutions/charm-base:ubuntu-22.04', imagePullPolicy='IfNotPresent', lifecycle=None, livenessProbe=Probe(exec=None, failureThreshold=3, grpc=None, httpGet=HTTPGetAction(port=38812, host=None, httpHeaders=None, path='/v1...s=[PersistentVolumeClaim(apiVersion='v1', kind='PersistentVolumeClaim', metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju-storage-owner': 'postgresql-k8s', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e', 'storage.juju.is/name': 'pgdata'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/managed-by': 'juju', 'storage.juju.is/name': 'pgdata'}, managedFields=None, name='postgresql-k8s-pgdata-04595d6f', namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PersistentVolumeClaimSpec(accessModes=['ReadWriteOnce'], dataSource=None, dataSourceRef=None, resources=VolumeResourceRequirements(limits=None, requests={'storage': '1Gi'}), selector=None, storageClassName='microk8s-hostpath', volumeAttributesClassName=None, volumeMode='Filesystem', volumeName=None), status=PersistentVolumeClaimStatus(accessModes=None, allocatedResourceStatuses=None, allocatedResources=None, capacity=None, conditions=None, currentVolumeAttributesClassName=None, modifyVolumeStatus=None, phase='Pending'))]) = StatefulSet(apiVersion='apps/v1', kind='StatefulSet', metadata=ObjectMeta(annotations={'app.juju.is/uuid': '04595d6f', 'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju.is/version': '3.6.2', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e'}, creationTimestamp=datetime.datetime(2025, 2, 18, 1, 32, 56, tzinfo=datetime.timezone.utc), deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=1, labels={'app.kubernetes.io/managed-by': 'juju', 'app.kubernetes.io/name': 'postgresql-k8s'}, managedFields=[ManagedFieldsEntry(apiVersion='apps/v1', fieldsType='FieldsV1', fieldsV1={'f:metadata': {'f:annotations': {'.': {}, 'f:app.juju.is/uuid': {}, 'f:controller.juju.is/id': {}, 'f:juju.is/version': {}, 'f:model.juju.is/id': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/managed-by': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:persistentVolumeClaimRetentionPolicy': {'.': {}, 'f:whenDeleted': {}, 'f:whenScaled': {}}, 'f:podManagementPolicy': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:serviceName': {}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:controller.juju.is/...fb598e', 'storage.juju.is/name': 'pgdata'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/managed-by': 'juju', 'storage.juju.is/name': 'pgdata'}, managedFields=None, name='postgresql-k8s-pgdata-04595d6f', namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PersistentVolumeClaimSpec(accessModes=['ReadWriteOnce'], dataSource=None, dataSourceRef=None, resources=VolumeResourceRequirements(limits=None, requests={'storage': '1Gi'}), selector=None, storageClassName='microk8s-hostpath', volumeAttributesClassName=None, volumeMode='Filesystem', volumeName=None), status=PersistentVolumeClaimStatus(accessModes=None, allocatedResourceStatuses=None, allocatedResources=None, capacity=None, conditions=None, currentVolumeAttributesClassName=None, modifyVolumeStatus=None, phase='Pending'))]), status=StatefulSetStatus(replicas=3, availableReplicas=3, collisionCount=0, conditions=None, currentReplicas=3, currentRevision='postgresql-k8s-79d659b6fc', observedGeneration=1, readyReplicas=3, updateRevision='postgresql-k8s-79d659b6fc', updatedReplicas=3)).spec","time":{"start":1739842677837,"stop":1739842702187,"duration":24350}},{"uid":"5c7c3fbd2ca8de39","reportUrl":"../3612//#testresult/5c7c3fbd2ca8de39","status":"passed","time":{"start":1739756509910,"stop":1739756528186,"duration":18276}}]},"tags":["asyncio","abort_on_fail","@pytest.mark.skipif(False, reason='Requires amd64 architecture')"]},"source":"1eef70f02ce11560.json","parameterValues":[]}