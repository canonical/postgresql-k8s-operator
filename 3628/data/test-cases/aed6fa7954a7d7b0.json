{"uid":"aed6fa7954a7d7b0","name":"test_pre_upgrade_check","fullName":"tests.integration.ha_tests.test_upgrade_from_stable#test_pre_upgrade_check","historyId":"6f73cd86130887313b53a62d2e64791e","time":{"start":1740016348603,"stop":1740016366872,"duration":18269},"description":"Test that the pre-upgrade-check action runs successfully.","descriptionHtml":"<p>Test that the pre-upgrade-check action runs successfully.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"event_loop","time":{"start":1740016060788,"stop":1740016060789,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tmp_path_factory","time":{"start":1740016060789,"stop":1740016060789,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ops_test","time":{"start":1740016060789,"stop":1740016061003,"duration":214},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"abort_on_fail","time":{"start":1740016348603,"stop":1740016348603,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test that the pre-upgrade-check action runs successfully.","status":"passed","steps":[],"attachments":[{"uid":"efc03e0f17ede4ef","name":"log","source":"efc03e0f17ede4ef.txt","type":"text/plain","size":518}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"abort_on_fail::0","time":{"start":1740016366872,"stop":1740016366872,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ops_test::finalizer","time":{"start":1740016881087,"stop":1740016881463,"duration":376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::2","time":{"start":1740016881464,"stop":1740016881465,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1740016881465,"stop":1740016881465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1740016881465,"stop":1740016881465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"abort_on_fail"},{"name":"tag","value":"@pytest.mark.skipif(False, reason='Requires amd64 architecture')"},{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests.integration.ha_tests"},{"name":"suite","value":"test_upgrade_from_stable"},{"name":"host","value":"fv-az1344-226"},{"name":"thread","value":"19543-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.ha_tests.test_upgrade_from_stable"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3f659931f505e5be","status":"unknown","time":{}}],"categories":[],"history":{"statistic":{"failed":1,"broken":0,"skipped":6,"passed":249,"unknown":6,"total":262},"items":[{"uid":"a9ac44ecc8ed645c","reportUrl":"../3620//#testresult/a9ac44ecc8ed645c","status":"passed","time":{"start":1739929858897,"stop":1739929877179,"duration":18282}},{"uid":"6a6c70b9f5e1367f","reportUrl":"../3615//#testresult/6a6c70b9f5e1367f","status":"failed","statusDetails":"AssertionError: Partition not set to 2\nassert 0 == 2\n +  where 0 = RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0).partition\n +    where RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0) = StatefulSetUpdateStrategy(rollingUpdate=RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0), type='RollingUpdate').rollingUpdate\n +      where StatefulSetUpdateStrategy(rollingUpdate=RollingUpdateStatefulSetStrategy(maxUnavailable=None, partition=0), type='RollingUpdate') = StatefulSetSpec(selector=LabelSelector(matchExpressions=None, matchLabels={'app.kubernetes.io/name': 'postgresql-k8s'}), serviceName='postgresql-k8s-endpoints', template=PodTemplateSpec(metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju.is/version': '3.6.2', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/name': 'postgresql-k8s'}, managedFields=None, name=None, namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PodSpec(containers=[Container(name='charm', args=['run', '--http', ':38812', '--verbose'], command=['/charm/bin/pebble'], env=[EnvVar(name='JUJU_CONTAINER_NAMES', value='postgresql', valueFrom=None), EnvVar(name='HTTP_PROBE_PORT', value='3856', valueFrom=None)], envFrom=None, image='docker.io/jujusolutions/charm-base:ubuntu-22.04', imagePullPolicy='IfNotPresent', lifecycle=None, livenessProbe=Probe(exec=None, failureThreshold=3, grpc=None, httpGet=HTTPGetAction(port=38812, host=None, httpHeaders=None, path='/v1...s=[PersistentVolumeClaim(apiVersion='v1', kind='PersistentVolumeClaim', metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju-storage-owner': 'postgresql-k8s', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e', 'storage.juju.is/name': 'pgdata'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/managed-by': 'juju', 'storage.juju.is/name': 'pgdata'}, managedFields=None, name='postgresql-k8s-pgdata-04595d6f', namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PersistentVolumeClaimSpec(accessModes=['ReadWriteOnce'], dataSource=None, dataSourceRef=None, resources=VolumeResourceRequirements(limits=None, requests={'storage': '1Gi'}), selector=None, storageClassName='microk8s-hostpath', volumeAttributesClassName=None, volumeMode='Filesystem', volumeName=None), status=PersistentVolumeClaimStatus(accessModes=None, allocatedResourceStatuses=None, allocatedResources=None, capacity=None, conditions=None, currentVolumeAttributesClassName=None, modifyVolumeStatus=None, phase='Pending'))]).updateStrategy\n +        where StatefulSetSpec(selector=LabelSelector(matchExpressions=None, matchLabels={'app.kubernetes.io/name': 'postgresql-k8s'}), serviceName='postgresql-k8s-endpoints', template=PodTemplateSpec(metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju.is/version': '3.6.2', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/name': 'postgresql-k8s'}, managedFields=None, name=None, namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PodSpec(containers=[Container(name='charm', args=['run', '--http', ':38812', '--verbose'], command=['/charm/bin/pebble'], env=[EnvVar(name='JUJU_CONTAINER_NAMES', value='postgresql', valueFrom=None), EnvVar(name='HTTP_PROBE_PORT', value='3856', valueFrom=None)], envFrom=None, image='docker.io/jujusolutions/charm-base:ubuntu-22.04', imagePullPolicy='IfNotPresent', lifecycle=None, livenessProbe=Probe(exec=None, failureThreshold=3, grpc=None, httpGet=HTTPGetAction(port=38812, host=None, httpHeaders=None, path='/v1...s=[PersistentVolumeClaim(apiVersion='v1', kind='PersistentVolumeClaim', metadata=ObjectMeta(annotations={'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju-storage-owner': 'postgresql-k8s', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e', 'storage.juju.is/name': 'pgdata'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/managed-by': 'juju', 'storage.juju.is/name': 'pgdata'}, managedFields=None, name='postgresql-k8s-pgdata-04595d6f', namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PersistentVolumeClaimSpec(accessModes=['ReadWriteOnce'], dataSource=None, dataSourceRef=None, resources=VolumeResourceRequirements(limits=None, requests={'storage': '1Gi'}), selector=None, storageClassName='microk8s-hostpath', volumeAttributesClassName=None, volumeMode='Filesystem', volumeName=None), status=PersistentVolumeClaimStatus(accessModes=None, allocatedResourceStatuses=None, allocatedResources=None, capacity=None, conditions=None, currentVolumeAttributesClassName=None, modifyVolumeStatus=None, phase='Pending'))]) = StatefulSet(apiVersion='apps/v1', kind='StatefulSet', metadata=ObjectMeta(annotations={'app.juju.is/uuid': '04595d6f', 'controller.juju.is/id': '5ad44662-ff29-467b-896b-aaae914c27ef', 'juju.is/version': '3.6.2', 'model.juju.is/id': '77c9cadb-7ac8-4869-80d6-a73333fb598e'}, creationTimestamp=datetime.datetime(2025, 2, 18, 1, 32, 56, tzinfo=datetime.timezone.utc), deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=1, labels={'app.kubernetes.io/managed-by': 'juju', 'app.kubernetes.io/name': 'postgresql-k8s'}, managedFields=[ManagedFieldsEntry(apiVersion='apps/v1', fieldsType='FieldsV1', fieldsV1={'f:metadata': {'f:annotations': {'.': {}, 'f:app.juju.is/uuid': {}, 'f:controller.juju.is/id': {}, 'f:juju.is/version': {}, 'f:model.juju.is/id': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/managed-by': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:persistentVolumeClaimRetentionPolicy': {'.': {}, 'f:whenDeleted': {}, 'f:whenScaled': {}}, 'f:podManagementPolicy': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:serviceName': {}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:controller.juju.is/...fb598e', 'storage.juju.is/name': 'pgdata'}, creationTimestamp=None, deletionGracePeriodSeconds=None, deletionTimestamp=None, finalizers=None, generateName=None, generation=None, labels={'app.kubernetes.io/managed-by': 'juju', 'storage.juju.is/name': 'pgdata'}, managedFields=None, name='postgresql-k8s-pgdata-04595d6f', namespace=None, ownerReferences=None, resourceVersion=None, selfLink=None, uid=None), spec=PersistentVolumeClaimSpec(accessModes=['ReadWriteOnce'], dataSource=None, dataSourceRef=None, resources=VolumeResourceRequirements(limits=None, requests={'storage': '1Gi'}), selector=None, storageClassName='microk8s-hostpath', volumeAttributesClassName=None, volumeMode='Filesystem', volumeName=None), status=PersistentVolumeClaimStatus(accessModes=None, allocatedResourceStatuses=None, allocatedResources=None, capacity=None, conditions=None, currentVolumeAttributesClassName=None, modifyVolumeStatus=None, phase='Pending'))]), status=StatefulSetStatus(replicas=3, availableReplicas=3, collisionCount=0, conditions=None, currentReplicas=3, currentRevision='postgresql-k8s-79d659b6fc', observedGeneration=1, readyReplicas=3, updateRevision='postgresql-k8s-79d659b6fc', updatedReplicas=3)).spec","time":{"start":1739842677837,"stop":1739842702187,"duration":24350}},{"uid":"5c7c3fbd2ca8de39","reportUrl":"../3612//#testresult/5c7c3fbd2ca8de39","status":"passed","time":{"start":1739756509910,"stop":1739756528186,"duration":18276}},{"uid":"b057881ab20eb660","reportUrl":"../3610//#testresult/b057881ab20eb660","status":"unknown","time":{}},{"uid":"fa7ce595c9fb9c0b","reportUrl":"../3609//#testresult/fa7ce595c9fb9c0b","status":"passed","time":{"start":1739583590945,"stop":1739583611242,"duration":20297}},{"uid":"776004b895f504e2","reportUrl":"../3595//#testresult/776004b895f504e2","status":"passed","time":{"start":1739410802490,"stop":1739410822779,"duration":20289}},{"uid":"a2d38c68a757388c","reportUrl":"../3592//#testresult/a2d38c68a757388c","status":"skipped","statusDetails":"XFAIL reason: aborted\n\n_pytest.outcomes.XFailed: aborted","time":{"start":1739324974766,"stop":1739324974766,"duration":0}},{"uid":"191dafd36ed98704","reportUrl":"../3572//#testresult/191dafd36ed98704","status":"passed","time":{"start":1739151220417,"stop":1739151238679,"duration":18262}},{"uid":"7e550022bf40682e","reportUrl":"../3571//#testresult/7e550022bf40682e","status":"passed","time":{"start":1739064904360,"stop":1739064921631,"duration":17271}},{"uid":"ff68f70ae32bb2f0","reportUrl":"../3570//#testresult/ff68f70ae32bb2f0","status":"passed","time":{"start":1738978453484,"stop":1738978470740,"duration":17256}},{"uid":"ea9a791b574638d1","reportUrl":"../3567//#testresult/ea9a791b574638d1","status":"passed","time":{"start":1738892079972,"stop":1738892100289,"duration":20317}},{"uid":"f5c9b04d2c16b02f","reportUrl":"../3558//#testresult/f5c9b04d2c16b02f","status":"passed","time":{"start":1738805649300,"stop":1738805669593,"duration":20293}},{"uid":"9902cda0e371c9fb","reportUrl":"../3554//#testresult/9902cda0e371c9fb","status":"passed","time":{"start":1738719263548,"stop":1738719283842,"duration":20294}},{"uid":"db43542e19f94f99","reportUrl":"../3544//#testresult/db43542e19f94f99","status":"passed","time":{"start":1738632840009,"stop":1738632860300,"duration":20291}},{"uid":"f7449c063ff4ad8f","reportUrl":"../3533//#testresult/f7449c063ff4ad8f","status":"passed","time":{"start":1738546387673,"stop":1738546409078,"duration":21405}},{"uid":"d23f4a1104cdbe2a","reportUrl":"../3532//#testresult/d23f4a1104cdbe2a","status":"passed","time":{"start":1738459994381,"stop":1738460014666,"duration":20285}},{"uid":"cbf6dc31aa679230","reportUrl":"../3531//#testresult/cbf6dc31aa679230","status":"passed","time":{"start":1738373562647,"stop":1738373580953,"duration":18306}},{"uid":"a206f6a7ae952853","reportUrl":"../3526//#testresult/a206f6a7ae952853","status":"passed","time":{"start":1738287186024,"stop":1738287203283,"duration":17259}},{"uid":"5e29cc0e54b568d","reportUrl":"../3520//#testresult/5e29cc0e54b568d","status":"passed","time":{"start":1738200819794,"stop":1738200841154,"duration":21360}},{"uid":"b40e951326f420e","reportUrl":"../3516//#testresult/b40e951326f420e","status":"passed","time":{"start":1738114383037,"stop":1738114403342,"duration":20305}}]},"tags":["asyncio","abort_on_fail","@pytest.mark.skipif(False, reason='Requires amd64 architecture')"]},"source":"aed6fa7954a7d7b0.json","parameterValues":[]}