# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.
name: Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    paths-ignore:
      - '.gitignore'
      - '.jujuignore'
      - 'LICENSE'
      - '**.md'
      - 'renovate.json'
  schedule:
    - cron: '53 0 * * *' # Daily at 00:53 UTC
  # Triggered on push to branch "main" by .github/workflows/release.yaml
  workflow_call:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tox
        # TODO: Consider replacing with custom image on self-hosted runner OR pinning version
        run: python3 -m pip install tox
      - name: Run linters
        run: tox run -e lint

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tox
        # TODO: Consider replacing with custom image on self-hosted runner OR pinning version
        run: python3 -m pip install tox
      - name: Run tests
        run: tox run -e unit

  lib-check:
    name: Check libraries
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check libs
        uses: canonical/charming-actions/check-libraries@2.3.0
        with:
          credentials: "${{ secrets.CHARMHUB_TOKEN }}"
          github-token: "${{ secrets.GITHUB_TOKEN }}"

  build:
    name: Build charms
    uses: canonical/data-platform-workflows/.github/workflows/build_charms_with_cache.yaml@v2

  integration-test:
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        tox-environments:
          - backup-integration
          - charm-integration
          - database-relation-integration
          - db-relation-integration
          - db-admin-relation-integration
          - ha-replication-integration
          - ha-self-healing-integration
          - password-rotation-integration
          - plugins-integration
          - tls-integration
        agent-versions:
          - "2.9.44"  # renovate: latest juju 2
          - "3.1.5"  # renovate: latest juju 3
    name: ${{ matrix.tox-environments }} | ${{ matrix.agent-versions }}
    needs:
      - lib-check
      - lint
      - unit-test
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set channel
        run: |
          juju_channel=$(echo "${{ matrix.agent-versions }}" | cut -c 1-3)
          echo "channel=${juju_channel}/stable" >> "$GITHUB_ENV"
          juju_major=$(echo "${{ matrix.agent-versions }}" | cut -c 1)
          echo "libjuju=juju${juju_major}" >> "$GITHUB_ENV"
      - name: Setup operator environment
        # TODO: Replace with custom image on self-hosted runner
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: microk8s
          channel: "1.27-strict/stable"
          bootstrap-options: "--agent-version ${{ matrix.agent-versions }}"
          juju-channel: "${{ env.channel }}"
      - name: Download packed charm(s)
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      - name: Select tests
        id: select-tests
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]
          then
            echo Running unstable and stable tests
            echo "mark_expression=" >> $GITHUB_OUTPUT
          else
            echo Skipping unstable tests
            echo "mark_expression=not unstable" >> $GITHUB_OUTPUT
          fi
      - name: Run integration tests
        run: tox run -e ${{ matrix.tox-environments }}-${{ env.libjuju }} -- -m '${{ steps.select-tests.outputs.mark_expression }}'
        env:
          AWS_ACCESS_KEY: "${{ secrets.AWS_ACCESS_KEY }}"
          AWS_SECRET_KEY: "${{ secrets.AWS_SECRET_KEY }}"
          GCP_ACCESS_KEY: "${{ secrets.GCP_ACCESS_KEY }}"
          GCP_SECRET_KEY: "${{ secrets.GCP_SECRET_KEY }}"
          CI_PACKED_CHARMS: ${{ needs.build.outputs.charms }}
